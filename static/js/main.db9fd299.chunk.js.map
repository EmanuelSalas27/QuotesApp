{"version":3,"sources":["QuotesScreen.js","hooks/useFetch.js","helpers/longNames.js","index.js"],"names":["QuotesScreen","url","useState","data","loading","error","state","setState","handleFetch","fetch","then","response","json","quote","catch","err","useEffect","useFetch","anime","character","name","arrName","split","arr","i","join","shortName","className","onClick","ReactDOM","render","document","getElementById"],"mappings":"yPASaA,EAAe,WAExB,MCToB,SAACC,GAErB,MAA0BC,mBAAS,CAACC,KAAK,GAAIC,SAAQ,EAAMC,MAAM,KAAjE,mBAAOC,EAAP,KAAcC,EAAd,KAMA,SAASC,IACLD,EAAS,CAACJ,KAAK,GAAIC,SAAQ,EAAMC,MAAM,KACvCI,MAAMR,GACLS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAIN,EAAS,CAACJ,KAAKU,EAAOT,SAAQ,EAAMC,MAAM,QACxDS,OAAM,SAAAC,GAAG,OAAER,EAAS,CAACJ,KAAK,GAAIC,SAAQ,EAAMC,MAAM,qCAEvD,OAXAW,qBAAU,WACPR,MACA,IASI,CAACF,QAAOE,eDNaS,CAAS,2CAA9BX,EAAP,EAAOA,MAAME,EAAb,EAAaA,YACNL,EAAuBG,EAAvBH,KAAKC,EAAkBE,EAAlBF,QAASC,EAASC,EAATD,MACrB,EAA6CF,EAAxCe,aAAL,MAAa,GAAb,IAA6Cf,EAA7BU,aAAhB,MAAwB,GAAxB,IAA6CV,EAAlBgB,iBAA3B,MAAuC,GAAvC,EAIA,OAFAD,EEdqB,SAACE,GAItB,IAHA,IAAIC,EAAUD,EAAKE,MAAM,KACrBC,EAAM,GAEDC,EAAI,EAAGA,EAAI,EAAGA,IACnBD,EAAG,sBAAOA,GAAP,CAAWF,EAAQG,KAI1B,MAAY,KAATJ,GAGSG,EAAIE,KAAK,KFEbC,CAAUR,GAId,sBAAKS,UAAU,YAAf,UAEKT,GACG,qBAAKS,UAAU,wBAAf,SACKT,IAKJb,EAYA,qBAAKsB,UAAU,WAAf,SAA2BtB,IAX5B,sBAAKsB,UAAS,eAAUvB,GAAS,oBAAjC,UAEI,4BAAYuB,UAAU,QAAtB,SACKd,GAAO,IAAOA,EAAQ,MAG3B,qBAAKc,UAAU,YAAf,SACKR,GAAW,KAAOA,OAQ9BD,GAAO,wBAAQS,UAAU,MAAMC,QAASpB,EAAjC,wBGxCpBqB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.db9fd299.chunk.js","sourcesContent":["\r\nimport './styles/styles.css'\r\nimport './animations/rotate.css'\r\nimport './animations/scale.css'\r\nimport { shortName } from './helpers/longNames'\r\nimport { useFetch } from './hooks/useFetch'\r\n\r\n\r\n\r\nexport const QuotesScreen = () => {\r\n    \r\n    const {state,handleFetch} = useFetch(\"https://animechan.vercel.app/api/random\")\r\n    const {data,loading, error} = state\r\n    let {anime = '',quote = '',character = ''} = data;\r\n\r\n    anime = shortName(anime);\r\n    \r\n    return (\r\n\r\n        <div className=\"container\">\r\n\r\n            {anime&&\r\n                <div className=\"anime animation-scale\">\r\n                    {anime}\r\n                </div>\r\n            }\r\n\r\n            {\r\n                !error?\r\n                <div className={`card ${loading&&'animation-rotate'}`}>\r\n            \r\n                    <blockquote className=\"quote\">\r\n                        {quote&&\"\\\"\" + quote + \"\\\"\"}\r\n                    </blockquote>\r\n\r\n                    <div className=\"character\">\r\n                        {character&&'-.' + character}\r\n                    </div>\r\n                </div>\r\n                \r\n                :<div className=\"card err\">{error}</div>\r\n            }\r\n            \r\n\r\n            {anime&&<button className=\"btn\" onClick={handleFetch} >\r\n                Random\r\n            </button>\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nexport const useFetch = (url) => {\r\n\r\n    const [state, setState] = useState({data:{}, loading:true ,error:''})\r\n    \r\n    useEffect(() => {\r\n       handleFetch()\r\n    }, [])\r\n\r\n    function handleFetch(){\r\n        setState({data:{}, loading:true ,error:''})\r\n        fetch(url)\r\n        .then(response => response.json())\r\n        .then(quote => setState({data:quote, loading:false,error:''}))\r\n        .catch(err=>setState({data:{}, loading:false,error:'Error al realizar la peticion'}))\r\n    }\r\n    return {state, handleFetch};\r\n}\r\n","\r\nexport const shortName = (name)=>{\r\n    let arrName = name.split(' ')\r\n    let arr = [];\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n        arr = [...arr,arrName[i]];\r\n\r\n    }\r\n\r\n    if(name === \"\"){\r\n        return false;\r\n    }else{\r\n        return (arr.join(\" \"));\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { QuotesScreen } from './QuotesScreen';\n\nReactDOM.render(\n  <QuotesScreen/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}